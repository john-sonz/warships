(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = {
    board: [10, 10],
    shipsSizes: [1, 1, 1, 1, 2, 2, 2, 3, 3, 4]
};
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var colors = ["blue", "red", "green", "yellow"];
var Board = /** @class */ (function () {
    function Board(width, height) {
        var _a;
        this.board = [];
        this.htmlBoard = [];
        this.ships = [];
        _a = [width, height], this.width = _a[0], this.height = _a[1];
        for (var i = 0; i < height; i++) {
            var row = [];
            for (var j = 0; j < width; j++) {
                row.push(0);
            }
            this.board.push(row);
        }
        this.createHTMLBoard();
    }
    Board.prototype.createHTMLBoard = function () {
        this.boardContainer = document.createElement("div");
        this.boardContainer.className = "board";
        for (var i = 0; i < this.height; i++) {
            var row = [];
            var rowDiv = document.createElement('div');
            rowDiv.className = "row";
            for (var j = 0; j < this.width; j++) {
                var cell = document.createElement("div");
                cell.className = "cell";
                row.push(cell);
                rowDiv.appendChild(cell);
            }
            this.htmlBoard.push(row);
            this.boardContainer.appendChild(rowDiv);
        }
    };
    Board.prototype.getHMTLBoard = function () { return this.boardContainer; };
    Board.prototype.addShip = function (x, y, length, direction) {
        if (direction === void 0) { direction = false; }
        for (var i = 0; i < length; i++) {
            var _a = [x, y], X = _a[0], Y = _a[1];
            if (direction)
                Y = y + i;
            else
                X = x + i;
            this.board[Y][X] = 1;
            this.htmlBoard[Y][X].style.backgroundColor = colors[length - 1];
        }
    };
    Board.prototype.drawShips = function (shipSizes) {
        var _this = this;
        while (shipSizes.length > 0) {
            var size = shipSizes.pop();
            var found = false;
            while (!found) {
                var _a = [Math.floor(Math.random() * this.width), Math.floor(Math.random() * this.height), Math.random() < 0.5], x = _a[0], y = _a[1], direction = _a[2];
                if (x > this.width - size && !direction) {
                    continue;
                }
                if (y > this.height - size && direction) {
                    continue;
                }
                if (size === 4) {
                    this.addShip(x, y, size, direction);
                    break;
                }
                var _b = generateCheckPositions(x, y, size, this.width, this.height, direction), shipsPos = _b[0], surroundings = _b[1];
                var checkedShipsPos = shipsPos.filter(function (pos) {
                    return _this.board[pos[1]][pos[0]] === 0;
                });
                var checkedSurroundings = surroundings.filter(function (pos) {
                    return _this.board[pos[1]][pos[0]] === 0;
                });
                found = (shipsPos.length === checkedShipsPos.length && surroundings.length === checkedSurroundings.length);
                if (found)
                    this.addShip(x, y, size, direction);
            }
        }
    };
    return Board;
}());
exports.default = Board;
function generateCheckPositions(x, y, length, width, height, direction) {
    if (direction === void 0) { direction = false; }
    var positions = [];
    for (var i = -1; i < 2; i++) {
        if (!direction) {
            for (var j = -1; j < length + 1; j++) {
                positions.push([x + j, y + i]);
            }
        }
        else {
            for (var j = -1; j < length + 1; j++) {
                positions.push([x + i, y + j]);
            }
        }
    }
    var shipPos = positions.splice(length + 3, length);
    return [shipPos, positions.filter(function (pos) {
            return (pos[0] >= 0 && pos[0] < width) && (pos[1] >= 0 && pos[1] < height);
        })];
}
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./../config");
var Board_1 = require("./Board");
var machineBoard = new Board_1.default(config_1.config.board[0], config_1.config.board[1]);
var playerBoard = new Board_1.default(config_1.config.board[0], config_1.config.board[1]);
document.getElementById("machine").appendChild(machineBoard.getHMTLBoard());
document.getElementById("player").appendChild(playerBoard.getHMTLBoard());
machineBoard.drawShips(config_1.config.shipsSizes.slice());
},{"./../config":1,"./Board":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
