(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = {
    board: [10, 10],
    shipsSizes: [1, 1, 1, 1, 2, 2, 2, 3, 3, 4]
};
},{}],2:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var colors = ["blue", "red", "green", "yellow"];
var Board = /** @class */ (function () {
    function Board(width, height) {
        var _a;
        this.board = [];
        this.htmlBoard = [];
        this.ships = [];
        this.lastProposed = null;
        _a = [width, height], this.width = _a[0], this.height = _a[1];
        for (var i = 0; i < height; i++) {
            var row = [];
            for (var j = 0; j < width; j++) {
                row.push(0);
            }
            this.board.push(row);
        }
    }
    Board.prototype.createHTMLBoard = function (shipSetter) {
        var _this = this;
        if (shipSetter === void 0) { shipSetter = null; }
        this.boardContainer = document.createElement("div");
        this.boardContainer.className = "board";
        for (var i = 0; i < this.height; i++) {
            var row = [];
            var rowDiv = document.createElement('div');
            rowDiv.className = "row";
            for (var j = 0; j < this.width; j++) {
                var cell = document.createElement("div");
                if (shipSetter) {
                    cell.addEventListener('mouseover', function (e) { return _this.checkShip(e, shipSetter, true); });
                    cell.addEventListener('click', function (e) { return _this.checkAndAddShip(e, shipSetter); });
                }
                cell.className = "cell";
                cell.id = j + "-" + i;
                row.push(cell);
                rowDiv.appendChild(cell);
            }
            this.htmlBoard.push(row);
            this.boardContainer.appendChild(rowDiv);
        }
    };
    Board.prototype.getHMTLBoard = function () { return this.boardContainer; };
    Board.prototype.addShip = function (x, y, length, direction, show) {
        if (show === void 0) { show = false; }
        for (var i = 0; i < length; i++) {
            var _a = [x, y], X = _a[0], Y = _a[1];
            if (direction)
                Y = y + i;
            else
                X = x + i;
            this.board[Y][X] = 1;
            if (show) {
                this.htmlBoard[Y][X].classList.add('blue');
            }
        }
    };
    Board.prototype.drawShips = function (shipSizes) {
        while (shipSizes.length > 0) {
            var size = shipSizes.pop();
            var found = false;
            while (!found) {
                var _a = [Math.floor(Math.random() * this.width), Math.floor(Math.random() * this.height), Math.random() < 0.5], x = _a[0], y = _a[1], direction = _a[2];
                if (x > this.width - size && !direction) {
                    continue;
                }
                if (y > this.height - size && direction) {
                    continue;
                }
                if (size === 4) {
                    this.addShip(x, y, size, direction);
                    break;
                }
                var s = {
                    x: x,
                    y: y,
                    direction: direction,
                    size: size
                };
                var _b = generateCheckPositions(s, this.width, this.height), shipsPos = _b[0], surroundings = _b[1];
                found = this.checkPositions(shipsPos, surroundings);
                if (found)
                    this.addShip(x, y, size, direction);
            }
        }
    };
    Board.prototype.checkPositions = function (ships, surroundings) {
        var _this = this;
        var s = ships.filter(function (pos) {
            return _this.board[pos[1]][pos[0]] === 0;
        });
        var sur = surroundings.filter(function (pos) {
            return _this.board[pos[1]][pos[0]] === 0;
        });
        return (ships.length === s.length && surroundings.length === sur.length);
    };
    Board.prototype.viewShip = function (color, s) {
        var x = s.x, y = s.y, direction = s.direction, size = s.size;
        for (var i = 0; i < size; i++) {
            var _a = [x, y], X = _a[0], Y = _a[1];
            if (direction)
                Y = y + i;
            else
                X = x + i;
            if (X >= 0 && X < this.width && Y >= 0 && Y < this.height) {
                this.htmlBoard[Y][X].style.backgroundColor = color;
            }
        }
        this.lastProposed = s;
    };
    Board.prototype.checkShip = function (e, shipSetter, view) {
        if (!shipSetter.selected)
            return false;
        var el = e.target;
        var pos = el.id.split("-").map(function (a) { return parseInt(a); });
        var ship = {
            x: pos[0],
            y: pos[1],
            direction: shipSetter.direction,
            size: shipSetter.selected
        };
        if (ship.x + ship.size > this.width && !ship.direction) {
            ship.x = this.width - ship.size;
        }
        if (ship.y + ship.size > this.height && ship.direction) {
            ship.y = this.width - ship.size;
        }
        var _a = generateCheckPositions(ship, this.width, this.height), shipsPos = _a[0], surroundings = _a[1];
        var shipValid = this.checkPositions(shipsPos, surroundings);
        if (view) {
            if (this.lastProposed) {
                this.viewShip("", this.lastProposed);
            }
            this.viewShip(shipValid ? "green" : "red", ship);
        }
        return shipValid;
    };
    Board.prototype.updateLastShip = function (dir) {
        if (!this.lastProposed)
            return;
        var s = __assign({}, this.lastProposed);
        s.direction = dir;
        this.viewShip("", this.lastProposed);
        this.viewShip("green", s);
    };
    Board.prototype.checkAndAddShip = function (e, shipS) {
        if (this.checkShip(e, shipS, false)) {
            this.viewShip("", this.lastProposed);
            var _a = this.lastProposed, x = _a.x, y = _a.y, direction = _a.direction, size = _a.size;
            this.addShip(x, y, size, direction, true);
            document.getElementsByClassName("selected")[0].remove();
            shipS.selected = null;
        }
    };
    return Board;
}());
exports.default = Board;
function generateCheckPositions(ship, width, height) {
    var x = ship.x, y = ship.y, size = ship.size, direction = ship.direction;
    var positions = [];
    for (var i = -1; i < 2; i++) {
        if (!direction) {
            for (var j = -1; j < size + 1; j++) {
                positions.push([x + j, y + i]);
            }
        }
        else {
            for (var j = -1; j < size + 1; j++) {
                positions.push([x + i, y + j]);
            }
        }
    }
    var shipPos = positions.splice(size + 3, size);
    return [shipPos, positions.filter(function (pos) {
            return (pos[0] >= 0 && pos[0] < width) && (pos[1] >= 0 && pos[1] < height);
        })];
}
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ShipSetter = /** @class */ (function () {
    function ShipSetter(ships) {
        var _this = this;
        this.getContainer = function () { return _this.container; };
        this.updateDirection = function () { return _this.direction = !_this.direction; };
        this.isSetting = function () { return _this.selected != null; };
        this.direction = true;
        this.ships = ships.slice();
        this.container = document.getElementById("ships");
        this.selected = Math.max.apply(Math, ships);
        for (var i = ships.length - 1; i >= 0; i--) {
            var ship = document.createElement("div");
            ship.id = "" + ships[i];
            ship.className = "ship";
            ship.addEventListener("click", function (e) {
                var a = document.getElementsByClassName("selected")[0];
                if (a)
                    a.classList.remove("selected");
                var el = e.currentTarget;
                el.classList.add('selected');
                _this.selected = parseInt(el.id);
            });
            for (var j = 0; j < ships[i]; j++) {
                var cell = document.createElement("div");
                ship.appendChild(cell);
            }
            this.container.appendChild(ship);
        }
        document.getElementsByClassName('ship')[0].classList.add("selected");
    }
    return ShipSetter;
}());
exports.default = ShipSetter;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./../config");
var Board_1 = require("./Board");
var ShipSetter_1 = require("./ShipSetter");
var board = config_1.config.board, shipsSizes = config_1.config.shipsSizes;
var machineBoard = new Board_1.default(board[0], board[1]);
var playerBoard = new Board_1.default(board[0], board[1]);
var shipSetter = new ShipSetter_1.default(shipsSizes);
machineBoard.createHTMLBoard();
playerBoard.createHTMLBoard(shipSetter);
document.getElementById("machine").appendChild(machineBoard.getHMTLBoard());
document.getElementById("player").appendChild(playerBoard.getHMTLBoard());
machineBoard.drawShips(shipsSizes.slice());
document.body.addEventListener("contextmenu", function (e) {
    e.preventDefault();
    if (shipSetter.isSetting()) {
        shipSetter.updateDirection();
        playerBoard.updateLastShip(shipSetter.direction);
    }
});
},{"./../config":1,"./Board":2,"./ShipSetter":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
