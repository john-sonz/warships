(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = {
    board: [10, 10],
    shipsSizes: [1, 1, 1, 1, 2, 2, 2, 3, 3, 4]
};
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var State;
(function (State) {
    State[State["Empty"] = 0] = "Empty";
    State[State["Taken"] = 1] = "Taken";
    State[State["Hit"] = 2] = "Hit";
    State[State["Miss"] = 3] = "Miss";
})(State || (State = {}));
;
var Win;
(function (Win) {
    Win[Win["Player"] = 0] = "Player";
    Win[Win["Machine"] = 1] = "Machine";
})(Win = exports.Win || (exports.Win = {}));
class Board {
    constructor(width, height, endGame = null) {
        this.board = [];
        this.shots = [];
        this.htmlBoard = [];
        this.ships = [];
        this.lastProposed = null;
        this.allowShoot = false;
        this.hits = 0;
        this.gameFinished = false;
        this.endGame = endGame;
        [this.width, this.height] = [width, height];
        for (let i = 0; i < height; i++) {
            const row = [];
            for (let j = 0; j < width; j++) {
                row.push(State.Empty);
                this.shots.push([i, j]);
            }
            this.board.push(row);
        }
    }
    createHTMLBoard(shipSetter = null, board2 = null) {
        this.boardContainer = document.createElement("div");
        this.boardContainer.className = "board";
        for (let i = 0; i < this.height; i++) {
            const row = [];
            const rowDiv = document.createElement('div');
            rowDiv.className = "row";
            for (let j = 0; j < this.width; j++) {
                const cell = document.createElement("div");
                if (shipSetter) {
                    this.toHit = shipSetter.ships.reduce((a, b) => a + b);
                    cell.addEventListener('mouseover', (e) => this.checkShip(e, shipSetter, true));
                    cell.addEventListener('click', (e) => this.checkAndAddShip(e, shipSetter));
                }
                else {
                    cell.addEventListener('click', (e) => this.shoot(i, j, board2));
                }
                cell.className = "cell";
                cell.id = `${j}-${i}`;
                row.push(cell);
                rowDiv.appendChild(cell);
            }
            this.htmlBoard.push(row);
            this.boardContainer.appendChild(rowDiv);
        }
    }
    getHMTLBoard() { return this.boardContainer; }
    addShip(x, y, length, direction, show = false) {
        for (let i = 0; i < length; i++) {
            let [X, Y] = [x, y];
            if (direction)
                Y = y + i;
            else
                X = x + i;
            this.board[Y][X] = State.Taken;
            if (show) {
                this.htmlBoard[Y][X].classList.add('blue');
            }
        }
    }
    drawShips(shipSizes) {
        this.toHit = shipSizes.reduce((a, b) => a + b);
        while (shipSizes.length > 0) {
            const size = shipSizes.pop();
            let found = false;
            while (!found) {
                let [x, y, direction] = [Math.floor(Math.random() * this.width), Math.floor(Math.random() * this.height), Math.random() < 0.5];
                if (x > this.width - size && !direction) {
                    continue;
                }
                if (y > this.height - size && direction) {
                    continue;
                }
                if (size === 4) {
                    this.addShip(x, y, size, direction);
                    break;
                }
                const s = {
                    x,
                    y,
                    direction,
                    size
                };
                const [shipsPos, surroundings] = generateCheckPositions(s, this.width, this.height);
                found = this.checkPositions(shipsPos, surroundings);
                if (found)
                    this.addShip(x, y, size, direction);
            }
        }
        console.table(this.board);
    }
    checkPositions(ships, surroundings) {
        const s = ships.filter(pos => {
            return this.board[pos[1]][pos[0]] === State.Empty;
        });
        const sur = surroundings.filter(pos => {
            return this.board[pos[1]][pos[0]] === State.Empty;
        });
        return (ships.length === s.length && surroundings.length === sur.length);
    }
    viewShip(color, s) {
        const { x, y, direction, size } = s;
        for (let i = 0; i < size; i++) {
            let [X, Y] = [x, y];
            if (direction)
                Y = y + i;
            else
                X = x + i;
            if (X >= 0 && X < this.width && Y >= 0 && Y < this.height) {
                this.htmlBoard[Y][X].style.backgroundColor = color;
            }
        }
        this.lastProposed = s;
    }
    checkShip(e, shipSetter, view) {
        if (!shipSetter.selected)
            return false;
        const el = e.target;
        const pos = el.id.split("-").map(a => parseInt(a));
        const ship = {
            x: pos[0],
            y: pos[1],
            direction: shipSetter.direction,
            size: shipSetter.selected
        };
        if (ship.x + ship.size > this.width && !ship.direction) {
            ship.x = this.width - ship.size;
        }
        if (ship.y + ship.size > this.height && ship.direction) {
            ship.y = this.width - ship.size;
        }
        const [shipsPos, surroundings] = generateCheckPositions(ship, this.width, this.height);
        const shipValid = this.checkPositions(shipsPos, surroundings);
        if (view) {
            if (this.lastProposed) {
                this.viewShip("", this.lastProposed);
            }
            this.viewShip(shipValid ? "green" : "red", ship);
        }
        return shipValid;
    }
    updateLastShip(dir) {
        if (!this.lastProposed)
            return;
        const s = Object.assign({}, this.lastProposed);
        s.direction = dir;
        this.viewShip("", this.lastProposed);
        this.viewShip("green", s);
    }
    checkAndAddShip(e, shipS) {
        if (this.checkShip(e, shipS, false)) {
            this.viewShip("", this.lastProposed);
            const { x, y, direction, size } = this.lastProposed;
            this.addShip(x, y, size, direction, true);
            shipS.shipPlaced();
        }
    }
    shoot(y, x, board2) {
        if (this.gameFinished)
            return;
        if (!this.allowShoot) {
            document.getElementById('sexi-text').innerHTML = "Nie możesz teraz strzelać";
            return;
        }
        if (this.board[y][x] === State.Miss || this.board[y][x] === State.Hit) {
            document.getElementById('sexi-text').innerHTML = "Już tam strzeliłeś";
            return;
        }
        const hit = this.board[y][x] === State.Taken;
        this.board[y][x] = hit ? State.Hit : State.Miss;
        this.htmlBoard[y][x].classList.add(hit ? 'hit' : 'miss');
        document.getElementById('sexi-text').innerHTML = hit ? "Trafiony!<br>Ruch komputera" : "Pudło<br>Ruch komputera";
        this.allowShoot = false;
        if (hit)
            this.hits++;
        if (this.hits === this.toHit) {
            this.endGame(Win.Player);
            this.gameFinished = true;
            return;
        }
        board2.randomShoot().then(([y, x, hit]) => {
            board2.htmlBoard[y][x].classList.add(hit ? 'hit' : 'miss');
            this.allowShoot = true;
            document.getElementById('sexi-text').innerHTML = "Twój ruch";
            if (board2.hits === board2.toHit) {
                this.endGame(Win.Machine);
                this.gameFinished = true;
            }
        });
    }
    randomShoot() {
        return new Promise((resolve, reject) => {
            const r = Math.floor(Math.random() * this.shots.length);
            const [y, x] = this.shots[r];
            const hit = this.board[y][x] === State.Taken;
            this.shots.splice(r, 1);
            if (hit)
                this.hits++;
            setTimeout(() => { resolve([y, x, hit]); }, 1000);
        });
    }
}
exports.default = Board;
function generateCheckPositions(ship, width, height) {
    const { x, y, size, direction } = ship;
    const positions = [];
    for (let i = -1; i < 2; i++) {
        if (!direction) {
            for (let j = -1; j < size + 1; j++) {
                positions.push([x + j, y + i]);
            }
        }
        else {
            for (let j = -1; j < size + 1; j++) {
                positions.push([x + i, y + j]);
            }
        }
    }
    const shipPos = positions.splice(size + 3, size);
    return [shipPos, positions.filter(pos => {
            return (pos[0] >= 0 && pos[0] < width) && (pos[1] >= 0 && pos[1] < height);
        })];
}
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ShipSetter {
    constructor(ships) {
        this.placed = 0;
        this.getContainer = () => this.container;
        this.updateDirection = () => this.direction = !this.direction;
        this.isSetting = () => this.selected != null;
        this.direction = true;
        this.ships = ships.slice();
        this.container = document.getElementById("ships");
        this.selected = Math.max(...ships);
        for (let i = ships.length - 1; i >= 0; i--) {
            const ship = document.createElement("div");
            ship.id = `${ships[i]}`;
            ship.className = "ship";
            ship.addEventListener("click", e => {
                const a = document.getElementsByClassName("selected")[0];
                if (a)
                    a.classList.remove("selected");
                const el = e.currentTarget;
                el.classList.add('selected');
                this.selected = parseInt(el.id);
            });
            for (let j = 0; j < ships[i]; j++) {
                const cell = document.createElement("div");
                ship.appendChild(cell);
            }
            this.container.appendChild(ship);
        }
        document.getElementsByClassName('ship')[0].classList.add("selected");
    }
    shipPlaced() {
        document.getElementsByClassName("selected")[0].remove();
        this.selected = null;
        this.placed++;
        if (this.placed === this.ships.length) {
            const startButton = document.getElementById('start');
            startButton.disabled = false;
            document.getElementById('ships').remove();
            const sexi = document.getElementById('sexi-text');
            sexi.innerHTML = "Rozpocznij grę";
        }
    }
}
exports.default = ShipSetter;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./../config");
const Board_1 = require("./Board");
const ShipSetter_1 = require("./ShipSetter");
function endGame(who) {
    if (who === Board_1.Win.Player) {
        document.getElementById('sexi-text').innerHTML = "Wygrałeś!";
    }
    else {
        document.getElementById('sexi-text').innerHTML = "Przegrałeś!";
    }
}
const { board, shipsSizes } = config_1.config;
const machineBoard = new Board_1.default(board[0], board[1], endGame);
const playerBoard = new Board_1.default(board[0], board[1], endGame);
const shipSetter = new ShipSetter_1.default(shipsSizes);
machineBoard.createHTMLBoard(null, playerBoard);
playerBoard.createHTMLBoard(shipSetter);
document.getElementById("machine").appendChild(machineBoard.getHMTLBoard());
document.getElementById("player").appendChild(playerBoard.getHMTLBoard());
machineBoard.drawShips(shipsSizes.slice());
document.body.addEventListener("contextmenu", e => {
    e.preventDefault();
    if (shipSetter.isSetting()) {
        shipSetter.updateDirection();
        playerBoard.updateLastShip(shipSetter.direction);
    }
});
const startButton = document.getElementById('start');
startButton.disabled = true;
startButton.addEventListener('click', (e) => {
    document.getElementById('sexi-text').innerHTML = "Twój ruch";
    machineBoard.allowShoot = true;
    startButton.remove();
});
},{"./../config":1,"./Board":2,"./ShipSetter":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
